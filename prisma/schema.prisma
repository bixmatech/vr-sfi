generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  credits       Int      @default(0)

  accounts Account[]
  sessions Session[]
  threads  Thread[]
  purchases Purchase[]
  creditLedger CreditLedger[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  agents Agent[]
}

model Agent {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?
  avatarUrl      String?
  welcomeMessage String?
  model          String   @default("gpt-3.5-turbo")
  temperature    Float    @default(0.7)
  presencePenalty Float   @default(0)
  frequencyPenalty Float  @default(0)
  outputLanguage String   @default("en")
  tone           String   @default("neutral")
  style          String   @default("plain")
  voice          String   @default("system")
  dalleEnabled   Boolean  @default(false)
  visibility     Visibility @default(PUBLIC)
  tierRequired   Int      @default(0)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  threads Thread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model Thread {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id])
  title     String?
  isPublic  Boolean  @default(false)
  shareId   String?  @unique

  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  role      String
  content   String
  tokens    Int      @default(0)
  cost      Int      @default(0) // credits cost
  createdAt DateTime @default(now())

  ledgerEntries CreditLedger[]
}

model CreditPackage {
  id           String  @id @default(cuid())
  name         String
  slug         String  @unique
  credits      Int
  priceCents   Int
  currency     String  @default("usd")
  tierUnlocked Int     @default(0)
  bonus        Int     @default(0)
  isActive     Boolean @default(true)

  purchases Purchase[]
}

model Purchase {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  provider      String   // stripe | paypal | bank
  providerId    String?
  status        String   // pending | paid | failed | canceled
  amountCents   Int
  currency      String   @default("usd")
  creditsGranted Int     @default(0)
  packageId     String?
  package       CreditPackage? @relation(fields: [packageId], references: [id])

  ledgers CreditLedger[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditLedger {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  delta      Int
  reason     String
  messageId  String?
  message    Message? @relation(fields: [messageId], references: [id])
  purchaseId String?
  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  createdAt  DateTime @default(now())
}

model BlogPost {
  id             String  @id @default(cuid())
  slug           String  @unique
  title          String
  excerpt        String?
  content        String
  seoTitle       String?
  seoDescription String?
  published      Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Page {
  id        String @id @default(cuid())
  slug      String @unique
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AnonymousUsage {
  id         String  @id @default(cuid())
  anonId     String  @unique
  messages   Int     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}